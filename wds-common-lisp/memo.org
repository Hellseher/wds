# File      : memo.org
# Created   : <2020-01-12 Sun 21:22:32 GMT>
# Modified  : <2020-02-15 Sat 09:58:36 GMT> #Rλatan
# Author    : #Rλatan
# Synopsis  : <>

* Timeline

** memo-200112222429: How to load ASDF ready system to your fresh image?
*** Synopsis
The easiest way is to perform it via Quicklisp package
manager and Emacs's SLIME package if you are not using systems like GUIX.

*** Require
+ You have Emacs semi configured and running.
+ You have one of the implementations of CL compiler installed and
  running (SBCL).
+ You have SLIME package installed and configured to work with your compiler.
+ Quicklisp is installed and configured with your compiler to load
  automatically.
  + Optional: on GUIX you don't need Quicklisp, most of packages are
    available for installation [[https://git.savannah.gnu.org/cgit/guix.git/tree/gnu/packages/lisp-xyz.scm][lisp-xyz]]

*** Actions
#+begin_example
emacs> M-x slime ; Starting SLIME connection to the CL image
#+end_example
With ASDF you have predefined locations where it tries to search for
files with ~asd~ extension [[https://gitlab.common-lisp.net/asdf/asdf/blob/master/source-registry.lisp#L198][source-registry]]. If some of them are already
presented in your configuration just place the project with ~asd~ file
there or create some under $HOME.

#+begin_example
CL-USER> (require :asdf)
CL-USER> (asdf/source-registry::default-user-source-registry)
CL-USER> (asdf/source-registry::default-system-source-registry)
#+end_example

Documentation was not so clear on how to check which paths are probed
for system definitions from REPL session.
- https://common-lisp.net/project/asdf/asdf.html#Configuring-ASDF-to-find-your-systems
- https://common-lisp.net/project/asdf/asdf.html#Controlling-where-ASDF-searches-for-systems

When you put the project to one of the locations it becomes available
both for =quicklisp= and =asdf=.

Quicklisp takes care about all ~:depends-on :SYSTEMNAME~ statements in
~asd~ file and download them from it's registry if missing. Registry
has updates once per month. For more rapid updates wheather use
https://guix.gnu.org/ or https://ultralisp.org/

#+begin_example
CL-USER> (ql:quickload :name-of-your-system)
#+end_example

In case when you are on the system like GUIX, and don't want using any
other package managers just load your project with =asdf= itself and
install missing packages by =guix= facility. Also take a look at
[[https://guix.gnu.org/manual/en/html_node/Defining-Packages.html][package definition]] and [[https://guix.gnu.org/manual/en/html_node/Invoking-guix-environment.html][development environment]].
#+begin_example
CL-USER> (asdf:load-system :name-of-your-system)
#+end_example

*** Result
If your system is defined correctly Quicklisp starts to load all
dependencies specified in the
~ASDF_SOURCE_REGISTRY/PROJECT_NAME/file.asd~ to the current image.

If you manage all dependencies yourself =asdf= starts loading your
~ASDF_SOURCE_REGISTRY/PROJECT_NAME/file.asd~

** memo-200201000044: What are the default packages of SBCL?
*** Synopsis
I needed to compare bare installations of SBCL of the same versions on
few machines. There was Guix and Fedora 31.
*** Require
+ Installed SBCL
*** Actions
There is an option of invoking ~sbls~ with evaluating arbitrary code
non-interacting it's a good combination with *nix CLI tools.
#+BEGIN_SRC sh :results value org replace
  sbcl --noinform \
       --no-sysinit \
       --no-userinit \
       --non-interactive \
       --eval '(loop for pkg in (list-all-packages) do (format t "~A ~%" pkg))' \
      | sort
#+END_SRC

#+RESULTS:
#+BEGIN_SRC org
#<PACKAGE "COMMON-LISP">
#<PACKAGE "COMMON-LISP-USER">
#<PACKAGE "KEYWORD">
#<PACKAGE "SB-ALIEN">
#<PACKAGE "SB-ALIEN-INTERNALS">
#<PACKAGE "SB-APROF">
#<PACKAGE "SB-ASSEM">
#<PACKAGE "SB-BIGNUM">
#<PACKAGE "SB-C">
#<PACKAGE "SB-DEBUG">
#<PACKAGE "SB-DI">
#<PACKAGE "SB-DISASSEM">
#<PACKAGE "SB-EVAL">
#<PACKAGE "SB-EXT">
#<PACKAGE "SB-FASL">
#<PACKAGE "SB-FORMAT">
#<PACKAGE "SB-GRAY">
#<PACKAGE "SB-IMPL">
#<PACKAGE "SB-INT">
#<PACKAGE "SB-KERNEL">
#<PACKAGE "SB-LFL">
#<PACKAGE "SB-LOOP">
#<PACKAGE "SB-MOP">
#<PACKAGE "SB-PCL">
#<PACKAGE "SB-PRETTY">
#<PACKAGE "SB-PROFILE">
#<PACKAGE "SB-REGALLOC">
#<PACKAGE "SB-SEQUENCE">
#<PACKAGE "SB-SYS">
#<PACKAGE "SB-THREAD">
#<PACKAGE "SB-UNICODE">
#<PACKAGE "SB-UNIX">
#<PACKAGE "SB-VM">
#<PACKAGE "SB-WALKER">
#<PACKAGE "SB-X86-64-ASM">
#+END_SRC

** memo-201128002650: How to interact with external commands and process?
*** Synopsis
I was faced with a task which involed interaction with external program (project
based on Python 3.8 ~subprocess~ module) and wanted to find out how it's
implemented in CL. There is a good articale in [[https://lispcookbook.github.io/cl-cookbook/os.html#running-external-programs][Cookbook]] to start from

Interaction with OS is implementation specific task but in some cases you may
need just ~uoip~ which comes with ASDF

*** Require
+ Installed SBCL
+ Installed ~uoip~ part of [[https://gitlab.common-lisp.net/asdf/asdf][ASDF]]
*** Actions
With ~uoip:run-program~ and ~uoip:launch-program~ you can evaluate command
synchronously or asynchronously by deafault it tries to run program in subshell.

#+begin_example
CL-USER> (uiop:run-program "date" :output *standard-output*)
Sat 28 Nov 01:00:34 GMT 2020
NIL
NIL
0 (0 bits, #x0, #o0, #b0)
#+end_example

You also can capture output of the run program:
#+begin_example
CL-USER> (defparameter *cmd-date* (uiop:run-program "date" :output :string))
*CMD-DATE*
CL-USER> *cmd-date*
"Sat 28 Nov 01:08:48 GMT 2020
"
#+end_example

#+begin_example
CL-USER> (defparameter *cmd-date* (uiop:run-program "date" :output '(:string :stripped t)))
*CMD-DATE*
CL-USER> *cmd-date*
"Sat 28 Nov 01:12:35 GMT 2020"
#+end_example

** memo-201129203258: How to access SQL Database?
*** Synopsis
I need to acces Sqlite[3] database from List image, so which system to use and which of them is
activaly supported (at list 2-3 updates per 3 monthes).
*** Require
- SBCL
- Slime
- Quicklisp or Guix
*** Actions

#+begin_src sh
touch  memo-201129203258.db
#+end_src

#+RESULTS:
#+begin_src lisp
(ql:quickload :cl-dbi)

(defparameter *connection*
  (dbi:connect :sqlite3
               :database-name #P"./dbi.db"))

(let* ((query (dbi:prepare *connection*
                           "CREATE TABLE IF NOT EXISTS
test_table (id int(10), name char(50))")))
  (dbi:execute query))

(let* ((query (dbi:prepare *connection*
                           "CREATE TABLE IF NOT EXISTS
 test_table_2 (id int(10), name char(50))")))
  (dbi:execute query))

(let* ((query (dbi:prepare *connection*
                           "SELECT * FROM sqlite_master
WHERE type = 'table' AND name NOT LIKE 'sqlite_%' ORDER BY 1"))
       (query (dbi:execute query)))
  (loop :for row = (dbi:fetch query)
        :while row
        :do (format t "~A~%" row)))

(dbi:do-sql *connection* "INSERT INTO test_table (id) VALUES (1)")

(dbi:disconnect *connection*)
#+end_src

#+RESULTS:
: #<SQLITE:SQLITE-HANDLE {10059BC683}>
** memo-201217151645: Was für ein Biest dieser LOOP ist
*** Synopsis
LOOP is a macro so what's I may solve and how tiht it..., I've tried so many times to dig deeper
toundestand how it build elegant loops, so let's considered as other round.
*** Require

*** Actions
~LOOP~ may have as many ~:for~ or ~:as~ clouse as you need, iteration will stop as soon as it
finishs longest of them (shortes?)

~:to~ ~:upto~ ~:below~ ~:downto~ ~:above~ ~:downfrom~

#+begin_example
(loop :for var :from start-number :to end-numver ...)
(loop :for var :from start-number :upto end-numver ...)
(loop :for var :downfrom start-number :to end-numver ...)
#+end_example


#+begin_src lisp :results replace raw
(loop
  :as i :upto 10
  :collect i)
#+end_src

#+RESULTS:
(0 1 2 3 4 5 6 7 8 9 10)

#+begin_src lisp :results replace raw
(loop
  :for i :upto 10
  :collect i)
#+end_src

#+RESULTS:
(0 1 2 3 4 5 6 7 8 9 10)

#+begin_src lisp :results replace raw
(loop
  :for i :upto 10
  :for j := (* i i)
  :collect (list i j))
#+end_src

#+RESULTS:
((0 0) (1 1) (2 4) (3 9) (4 16) (5 25) (6 36) (7 49) (8 64) (9 81) (10 100))

#+begin_src lisp :results replace raw
(loop
  :for i :upto 10
  :for j := (* i i)
  :for k := (* j j)
  :collect (list i j k))
#+end_src

#+RESULTS:
((0 0 0) (1 1 1) (2 4 16) (3 9 81) (4 16 256) (5 25 625) (6 36 1296)
 (7 49 2401) (8 64 4096) (9 81 6561) (10 100 10000))

#+begin_src lisp :results replace raw
(loop
  :for i :from 0 :downto -10
  :collect i)
#+end_src

#+RESULTS:
(0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10)

#+begin_src lisp :results replace raw
(loop
  :for i :from 10 :to 20
  :collect i)
#+end_src

#+RESULTS:
(10 11 12 13 14 15 16 17 18 19 20)

#+begin_src lisp :results replace raw
(loop
  :for i :from 20 :to 10
  :collect i)
#+end_src

#+RESULTS:
NIL

#+begin_src lisp :results replace raw
(loop
  :for i :from 20 :downto 10
  :collect i)
#+end_src

#+RESULTS:
(20 19 18 17 16 15 14 13 12 11 10)

#+begin_src lisp :results replace raw
(loop
  :for i :downfrom 20 :to 10
  :collect i)
#+end_src

#+RESULTS:
(20 19 18 17 16 15 14 13 12 11 10)

#+begin_src lisp :results replace raw
(loop
  :repeat 10
  :do (print "hello world"))
#+end_src

#+RESULTS:
NIL

Looping over collections

~:in~

: (loop :for var :in list-form)

#+begin_src lisp :results replace raw
(loop
  :for i :in (list 1 2 3 4 5 6 7 8 9)
  :collect (* i 2))
#+end_src

#+RESULTS:
(2 4 6 8 10 12 14 16 18)

* Glossary
- <<<image>>>
- <<<system>>>

# End of memo.org
