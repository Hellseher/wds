# File          : wds-emacs-execrices.el
# Created       : Sun 24 Apr 2016 14:02:12
# Last Modified : <2016-11-14 Mon 22:13:37 GMT> sharlatan
# Authour       : sharlatan
# Maintainer(s) :

#+OPTIONS: num:nil

#+TITLE: Emacs exercies
* Exercies
** 1.0 List Processing
*** Examples
#+NAME: e-1.1
#+BEGIN_SRC emacs-lisp
(+ 2 2)
#+END_SRC

#+RESULTS: e-1.1
: 4

#+NAME: e-1.2
#+BEGIN_SRC emacs-lisp
(+)
(*)
#+END_SRC

#+RESULTS: e-1.2
: 1

#+NAME: e-1.3
#+BEGIN_SRC emacs-lisp
(zerop 0)
#+END_SRC

#+RESULTS: e-1.3
: t

*** 1.n Notes
| before evaluating | after evaluating                                            |
|-------------------+-------------------------------------------------------------|
| number            | number                                                      |
| string            | string                                                      |
| symbol            | value                                                       |
| list              | (function-name arguments) 1. fn, 2. instruction of function |
| '(one two three)  | not evaluated, returns (one two tree)                       |
| (function)        | alway returns a value,  error                               |
|                   |                                                             |

If you try to evaluate symbol not bound to a value or a function
interpreter will give you an error.

*** 1.11 Exercises
Generate an error message by evaluating an appropriate symbol that is
not within parentheses.
#+NAME: ex-1.11.1
#+BEGIN_SRC emacs-lisp
hello-world!
#+END_SRC

Generate an error message by evaluating an appropriate symbol that is
between parentheses.
#+NAME: ex-1.11.2
#+BEGIN_SRC emacs-lisp
(hello-world!)
#+END_SRC

Create a counter that increments by two rather than one.
#+NAME: ex-1.11.3
#+BEGIN_SRC emacs-lisp
(setq counter 0)
(setq counter (+ 2 counter))
counter
#+END_SRC

#+RESULTS: ex-1.11.3
: 2

Write an expression that prints a message in the echo area when
evaluated.
#+NAME: ex-1.11.4
#+BEGIN_SRC emacs-lisp
(message "Try this massage!")
#+END_SRC

#+RESULTS: e-1.4
: Try this massage!


** 2.0 Practicing Evaluation
*** Examples
(buffer-name)
(current-buffer)
(other-buffer)
(switch-to-buffer (other-buffer))
(set-buffer)
**** 2.4 Buffer Size and the Location of Point
(buffer-size)
(point)
(point-min)
(point-max)
(got-char)
(buffer-file-name)
*** 2.6 Exercies

Find a file with which you are working and move towards its middle.
Find its buffer name, file name, length, and your position in the file.

#+NAME: move to midle of file
#+BEGIN_SRC emacs-lisp
(goto-char
 (/ (point-max) 2))
#+END_SRC

#+RESULTS: move
: 2475

#+NAME: return list with buffer name, file name, length and position
#+BEGIN_SRC emacs-lisp
(list
 (buffer-name)
 (buffer-file-name)
 (point-max)
 (point))
#+END_SRC

#+RESULTS: return




** 3.0 Writing Defuns
/How to Write Function Definitions/
*** Examples
#+BEGIN_SRC emacs-lisp
(copy-to-buffer)
(interactive)
(let)
(defun)
(if)
(save-excursion)
(exchange-point-and-mark) ; C-x C-x
(center-region)
#+END_SRC

#+NAME: check interactive
#+BEGIN_SRC emacs-lisp
(defun check-interactive()
(interactive "a")
(message "hello world"))
#+END_SRC

*** 3.12 Exercises
Write a non-interactive function that doubles the value of its
argument, a number.  Make that function interactive.
#+NAME: make-it-double-noninteractive
#+BEGIN_SRC emacs-lisp
(defun double-number (number)
(* number 2))
#+END_SRC

#+RESULTS: make-it-double
: double-number

#+NAME: make-it-double-interactive
#+BEGIN_SRC emacs-lisp
(defun double-number-int (number)
(interactive "Number: ")
(message "Doubled %d" (* number 2)))
#+END_SRC

#+RESULTS: make-it-double-interactive
: double-number-int


Write a function that tests whether the current value of ‘fill-column’
is greater than the argument passed to the function, and if so, prints
an appropriate message.
#+NAME: some-if-examples
#+BEGIN_SRC emacs-lisp
  (defun compare-with-column (value)
  (interactive " ")
  (if (= value fill-column)
  (message "yes yes")
  (message "no no")))
#+END_SRC



** 4.0 Buffer-Related Functions

*** 4.6.1. Ex
Write your own ‘simplified-end-of-buffer’ function definition; then
test it to see whether it works.

#+NAME: ex-4.6.1
#+BEGIN_SRC emacs-lisp
(defun simplified-end-of-buffer ()
  "Jump to the end of a buffer."
  (interactive)
  (push-mark)
  (goto-char (point-max)))
#+END_SRC

#+RESULTS: ex-4.6.1
: simplified-end-of-buffer

*** 4.6.2. Ex
Use ‘if and get-buffer to write a function that prints a message
telling you whether a buffer exists.
#+NAME: ex-4.6.2
#+BEGIN_SRC emacs-lisp +n
(defun exists-buffer-p (buffname)
  "Check whether BUFFNAME exists or not."
  (interactive "Buffer name: ")
  (if (get-buffer buffname)
      (message "Buffer %s exists" buffname)
    (message "Upsi dasy not exexesy - %s" buffname)))
#+END_SRC

#+NAME: ex-4.6-extra
#+BEGIN_SRC emacs-lisp
(defun test-message ()
  "Simple example how to use message function."
  (interactive)
  (let ((test-string "hello"))
    (message "Lets print test sting %s" test-string)))
#+END_SRC

*** 4.6.4. Ex
Using ‘find-tag’, find the source for the ‘copy-to-buffer’
function.

*** 4.6.n. Notes
A page break can also be used for a logical separation of source-code
sections. Emacs has commands and key bindings that use page breaks,
such as:

#+BEGIN_SRC emacs-lisp
(forward-page)   ; C-x ]
, C-]
(backward-page)  ; C-x [, C-[
(narrow-to-page) ; C-x n p
#+END_SRC

Other functions, such as ‘mark-page’, operate on the content of a page. See also PageMode.



** 6.0 Narrowing & Widening

*** 6.3 Ex
Write a  function that  will display  the first  60 characters  of the
current buffer,  even if you  have narrowed  the buffer to  its latter
half so that the first line is inaccessible.  Restore point, mark, and
narrowing.  For  this exercise, you need  to use a whole  potpourri of
functions,   including   ‘save-restriction’,   ‘widen’,   ‘goto-char’,
‘point-min’, ‘message’, and ‘buffer-substring’.

#+BEGIN_SRC emacs-lisp
  (defun display-first-N-chars (N)
    "Count first 60 characters of the buffer even if it's narrowed"
    (interactive "P")
    (save-restriction
      (widen)
      (save-excursion
        (message "%s" (buffer-substring-no-properties 1 (1+ N))))))
#+END_SRC

** 7.0 car cdr & cons
*** Functions
car - first element of a list
cdr - rest elemnts exept the first one
cons - construct a list
setcar -
setcdr - replaces the second and subseuent element of a list
nth - Nth element of a list

*** 7.7 Ex
1. Construct a list of four birds by evaluating several expressions with ‘cons’.
   #+NAME: ex07-ls01
   #+BEGIN_SRC emacs-lisp :exports both
     ;; Birds in Russian translit constructed with multiple 'cons'.
     (setq ptichki (cons 'snigir
                         (cons 'ivolga
                               (cons 'djatel '(chajka)))))
   #+END_SRC

   #+RESULTS: ex07-ls01
   | snigir | ivolga | djatel | chajka |

2. Find out what happens when you ‘cons’ a list onto itself.
   #+NAME: ex07-ls02
   #+BEGIN_SRC emacs-lisp :exports both :var ptichki=ex07-ls01
     (cons ptichki ptichki)
   #+END_SRC

   #+RESULTS: ex07-ls02
   | (snigir ivolga djatel chajka) | snigir | ivolga | djatel | chajka |

3. Replace the first element of the list of four birds with a fish.
   #+NAME: ex07-ls03
   #+BEGIN_SRC emacs-lisp :exports both :var ptichki=ex07-ls01
     (setcar ptichki 'kambala)
     ptichki
   #+END_SRC

   #+RESULTS: ex07-ls03
   | kambala | ivolga | djatel | chajka |

4. Replace the rest  of that list with a list of other fish.
   #+NAME: ex07-ls04
   #+BEGIN_SRC emacs-lisp :exports both :var ptichki=ex07-ls03
     (setcdr ptichki '(tolsolobik farel karp))
     ptichki
   #+END_SRC

   #+RESULTS: ex07-ls04
   | kambala | tolsolobik | farel | karp |

** 8.0 Cutting and Storing Text
*** Functions
- nthcdr :: Take cdr N times on LIST, return the result.
- zap-to-char ::  in Emacs 24.5.1
#+BEGIN_SRC emacs-lisp
  (defun zap-to-char (arg char)
    "Kill up to and including ARGth occurrence of CHAR.
  Case is ignored if `case-fold-search' is non-nil in the current buffer.
  Goes backward if ARG is negative; error if CHAR not found."
    (interactive (list (prefix-numeric-value current-prefix-arg)
                       (read-char "Zap to char: " t)))
    ;; Avoid "obsolete" warnings for translation-table-for-input.
    (with-no-warnings
      (if (char-table-p translation-table-for-input)
          (setq char (or (aref translation-table-for-input char) char))))
    (kill-region (point) (progn
                           (search-forward (char-to-string char) nil nil arg)
                           (point))))
#+END_SRC
:  search-forward*
#+BEGIN_EXAMPLE
 (search-forward "TARGET-STRING"
                     LIMIT-OF-SEARCH
                     WHAT-TO-DO-IF-SEARCH-FAILS
                     REPEAT-COUNT)
#+END_EXAMPLE
*** 8.8 Ex

* Glosary
- argument :: the information prosented to the function, in Lisp could be atoms
              or lists.
- atom :: multi-char symbols, single char symbol "+", string of char "like
          this", numbers
- bind (assign) :: assosiate value, function with a symbol
- buffer
- compiling
- data type
- evaluation
- file
- function ::
- function call :
- function definition : code attached to a symbol telling computer what to do.
- interpreter
- kill (clip) :: kill text out of a buffer and put it into storage from which it
                 can be brought back.
- list
- macros
- mark
- marker
- number
- object
- point
- predicate :: refers to a function to determine whethere some property is true
               of false.  in Lisp's usualy marks as last part of the symbol
               "...p", "...-p"
- primitive function :: basic function in Emacs environment written in C.
- region :: space betwin point and mark
- special form ::
- string :: string of characters "some thing like that", string is atom
- symbol :: can have both a fun. def. and a value attached to it at the same time
- Symbolic expression
  - S-exp
  - S-expression
  - sexp
- value
- variable :: a symbol that has a valueE
- kill ring :: a list that hold the pieces of text.
* Referances
- https://github.com/RenWenshan/emacs-lisp-intro-solutions
